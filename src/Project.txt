
Project Name: OMINI

Client: Own product of Yes Securities

Domain: Banking

Users: Trader & Investor

Description: It is a Stock broking application. Where user check Market Info, can analyse stock,
track the stock by adding in watchlist, buy/sell stocks, can check his Position & Holdings,
can apply in ipo, can check all his account reports like payin-payout, P&L, etc.

Module:
1. Login
2. Dashboard
    - Research stocks (Short Term, Long Term)
    - Top stocks (Most Active, Top Gainers, Top Losers)
    - Indices (Equity, Currencies, World)
    - Top Stories
    - Sector Heatmap
3. Watchlist
    - Create, Edit, Delete watchlist
    - Add stock, change sequence of stocks
4. Price Alert
5. Report
    - View report, Generate pdf, Send via email
    - Filter by Segment like Equity, F&O, Currency
    - Filter by Date
        - Tread Summary (stock name, quantity, exchange, order type buy/sell, timestamp, average price, trade id)
        - Fund Transfer (deposited/withdraw amount, date)
        - Profit/Loss (stock, quantity, short/long term,buy value, sell value, p/l, p/l %)
        - Brokerage & Charges
        - Holding

=====================================================================================================

Introduction:

My name is Ujjwal Maity. Currently working in Apexon. I have 4 years of experience in Java.
My last company was Yes Securities there I developed OMINI which was a Stock broking applications. 

The primary goal of the project was to provide a platform to user where user can buy/sell stocks,
can track stock, can view his portfolio, can apply in ipo, can check all his account reports, etc.

I was responsible for creating the middleware and admin REST APIs
using Java, Spring Boot and Hibernate
for Login, Profile & Settings, Dashboard, Watchlist, Reports, Price Alert & Notification, Help & Support modules.

We are using Microservice architecture, MongoDB & PostgresSQL for database,
Redis for caching, JWT for authentication, Git to collaborate with my teammates.
I integrated third-party REST APIs, SMS & Email sending service. 

This project enhanced my experience in microservices architecture.

Difficulty:

- Performance issue because of multiple request at a same time
- We use redis to cache data,
    so that every query does not go to db,
    it fetches data from Redis.
    It helps to improve performance.

